/homes/avasan/miniforge3_new/envs/sst_llama/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
Some weights of the model checkpoint at seyonec/ChemBERTa-zinc-base-v1 were not used when initializing RobertaForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing RobertaForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
roberta RobertaModel(
  (embeddings): RobertaEmbeddings(
    (word_embeddings): Embedding(767, 768, padding_idx=1)
    (position_embeddings): Embedding(514, 768, padding_idx=1)
    (token_type_embeddings): Embedding(1, 768)
    (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (encoder): RobertaEncoder(
    (layer): ModuleList(
      (0-5): 6 x RobertaLayer(
        (attention): RobertaAttention(
          (self): RobertaSelfAttention(
            (query): Linear(in_features=768, out_features=768, bias=True)
            (key): Linear(in_features=768, out_features=768, bias=True)
            (value): Linear(in_features=768, out_features=768, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (output): RobertaSelfOutput(
            (dense): Linear(in_features=768, out_features=768, bias=True)
            (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
        (intermediate): RobertaIntermediate(
          (dense): Linear(in_features=768, out_features=3072, bias=True)
          (intermediate_act_fn): GELUActivation()
        )
        (output): RobertaOutput(
          (dense): Linear(in_features=3072, out_features=768, bias=True)
          (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.1, inplace=False)
        )
      )
    )
  )
)
lm_head RobertaLMHead(
  (dense): Linear(in_features=768, out_features=768, bias=True)
  (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
  (decoder): Linear(in_features=768, out_features=767, bias=True)
)
Epoch 0
MaskedLMOutput(loss=tensor(9.3588, device='cuda:0'), logits=tensor([[[-1.3121, -0.8264, -2.1825,  ..., -1.0796, -1.7651, -3.4829],
         [-1.8223, -1.7135, -2.1281,  ..., -0.9202, -3.2656, -3.1307],
         [-3.2245, -1.8258, -3.2559,  ..., -1.1980, -1.1297, -1.3733],
         ...,
         [-1.9720, -1.9420, -3.1795,  ..., -1.2730, -2.5129, -4.1318],
         [-1.9720, -1.9420, -3.1795,  ..., -1.2730, -2.5129, -4.1318],
         [-1.9720, -1.9420, -3.1795,  ..., -1.2730, -2.5129, -4.1318]],
        [[-2.0438, -2.2975, -2.7936,  ..., -1.3039, -1.9883, -3.2745],
         [-1.9354, -2.0210, -2.0670,  ..., -0.4489, -2.3751, -3.3433],
         [-2.1152, -2.4503, -1.2518,  ..., -2.5970, -1.8734, -2.3760],
         ...,
         [-1.9977, -2.3795, -3.1624,  ..., -1.3967, -2.3847, -3.8297],
         [-1.9977, -2.3795, -3.1624,  ..., -1.3967, -2.3847, -3.8297],
         [-1.9977, -2.3795, -3.1624,  ..., -1.3967, -2.3847, -3.8297]],
        [[-1.8921, -2.1321, -1.4961,  ..., -1.6327, -1.3108, -3.6021],
         [-2.3618, -1.1001, -1.1145,  ..., -0.9727, -3.2421, -3.0492],
         [-2.9480, -1.5021, -2.9836,  ..., -0.5846, -2.0198, -2.1218],
         ...,
         [-2.1781, -1.9924, -2.9098,  ..., -1.3690, -2.3926, -4.3448],
         [-2.1781, -1.9924, -2.9098,  ..., -1.3690, -2.3926, -4.3448],
         [-2.1781, -1.9924, -2.9098,  ..., -1.3690, -2.3926, -4.3448]],
        ...,
        [[-2.3282, -1.5449, -2.5980,  ..., -1.1385, -2.1724, -3.1576],
         [-1.8561, -1.6127, -1.8668,  ..., -0.6876, -3.1536, -3.1455],
         [-1.8907, -2.3413, -2.9482,  ..., -1.3911, -2.7661, -2.6538],
         ...,
         [-2.3796, -1.8443, -2.9909,  ..., -1.3445, -2.4838, -3.7061],
         [-2.3796, -1.8443, -2.9909,  ..., -1.3445, -2.4838, -3.7061],
         [-2.3796, -1.8443, -2.9909,  ..., -1.3445, -2.4838, -3.7061]],
        [[-1.7521, -1.5248, -2.5003,  ..., -0.7393, -2.1282, -2.9397],
         [-2.2479, -2.1742, -1.7354,  ..., -1.1858, -3.5258, -2.4423],
         [-1.8674, -2.3832, -2.5534,  ..., -0.8179, -2.9296, -1.3208],
         ...,
         [-1.8993, -2.1937, -3.0651,  ..., -1.3018, -2.4051, -3.5815],
         [-1.8993, -2.1937, -3.0651,  ..., -1.3018, -2.4051, -3.5815],
         [-1.8993, -2.1937, -3.0651,  ..., -1.3018, -2.4051, -3.5815]],
        [[-2.1430, -1.1102, -2.5954,  ..., -1.1369, -1.7361, -2.3453],
         [-1.7880, -1.7367, -1.9856,  ..., -0.7422, -3.5753, -3.3848],
         [-1.3405, -1.2389, -2.4449,  ..., -1.4058, -1.3828, -1.6449],
         ...,
         [-1.9248, -1.7627, -3.1514,  ..., -1.4789, -2.4991, -3.7615],
         [-1.9248, -1.7627, -3.1514,  ..., -1.4789, -2.4991, -3.7615],
         [-1.9248, -1.7627, -3.1514,  ..., -1.4789, -2.4991, -3.7615]]],
       device='cuda:0'), hidden_states=(tensor([[[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [-0.6499,  0.2342,  0.6842,  ..., -0.1751,  0.9928,  0.1296],
         [ 2.7104,  0.7280,  0.7115,  ...,  0.2078,  0.6407, -0.4736],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]],
        [[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [ 0.9423, -0.3655,  0.6923,  ...,  0.5990,  0.7898,  1.0779],
         [ 1.7127,  1.2742,  0.2241,  ...,  0.6816, -1.5441,  0.6476],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]],
        [[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [-0.0802, -0.2167, -0.0975,  ...,  0.1734,  0.3252,  0.1280],
         [ 1.8586,  0.2562,  0.3459,  ...,  0.5776,  0.4501,  0.1062],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]],
        ...,
        [[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [-0.0802, -0.2167, -0.0975,  ...,  0.1734,  0.3252,  0.1280],
         [ 1.8586,  0.2562,  0.3459,  ...,  0.5776,  0.4501,  0.1062],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]],
        [[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [-0.0802, -0.2167, -0.0975,  ...,  0.1734,  0.3252,  0.1280],
         [ 1.8586,  0.2562,  0.3459,  ...,  0.5776,  0.4501,  0.1062],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]],
        [[ 1.7301, -0.2906, -0.5046,  ..., -0.0057, -1.4491,  0.3965],
         [ 0.4018, -0.8859,  0.0449,  ...,  0.1302,  1.0275, -0.6670],
         [ 1.1412,  1.4194, -0.8222,  ...,  0.2388, -0.2058, -1.4689],
         ...,
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433],
         [ 1.0390, -0.1117, -1.6673,  ..., -0.4021, -1.1694,  0.6433]]],
       device='cuda:0'), tensor([[[ 1.6887, -1.4499,  1.2243,  ..., -1.7313, -0.9284,  2.2857],
         [-0.0709, -1.0331,  0.5005,  ..., -1.2122, -0.6495,  0.1352],
         [ 2.1426,  0.0958,  0.5041,  ..., -0.6149,  0.2500, -0.0283],
         ...,
         [ 0.7971, -0.7647, -2.1907,  ..., -0.9523, -1.2733,  1.1584],
         [ 0.7971, -0.7647, -2.1907,  ..., -0.9523, -1.2733,  1.1584],
         [ 0.7971, -0.7647, -2.1907,  ..., -0.9523, -1.2733,  1.1584]],
        [[ 1.7213, -1.3191,  1.4381,  ..., -1.5433, -0.7585,  2.3707],
         [ 1.0896, -0.8305,  0.3965,  ..., -0.7013,  0.2951,  0.7324],
         [ 2.0447,  0.3446, -0.4882,  ..., -0.5329, -2.3220,  1.2005],
         ...,
         [ 0.6264, -0.9651, -2.2606,  ..., -1.1703, -1.3215,  0.8380],
         [ 0.6264, -0.9651, -2.2606,  ..., -1.1703, -1.3215,  0.8380],
         [ 0.6264, -0.9651, -2.2606,  ..., -1.1703, -1.3215,  0.8380]],
        [[ 1.6150, -1.3783,  1.2980,  ..., -1.3856, -0.9235,  1.9363],
         [ 0.4538, -1.0612,  0.6228,  ..., -0.7863, -0.2634,  0.0488],
         [ 1.9954,  1.0350,  0.5710,  ...,  0.1497,  0.0180,  0.1243],
         ...,
         [ 0.5825, -0.5855, -1.8297,  ..., -0.7448, -1.2073,  0.7800],
         [ 0.5825, -0.5855, -1.8297,  ..., -0.7448, -1.2073,  0.7800],
         [ 0.5825, -0.5855, -1.8297,  ..., -0.7448, -1.2073,  0.7800]],
        ...,
        [[ 1.8490, -1.1334,  1.5059,  ..., -1.5257, -0.8839,  2.1749],
         [ 0.6575, -0.6666,  0.6243,  ..., -0.8291, -0.2282,  0.2659],
         [ 1.9046,  1.1293,  0.0982,  ...,  0.1293,  0.1203,  0.2742],
         ...,
         [ 0.6919, -0.3504, -1.6826,  ..., -1.1443, -1.2664,  1.1829],
         [ 0.6919, -0.3504, -1.6826,  ..., -1.1443, -1.2664,  1.1829],
         [ 0.6919, -0.3504, -1.6826,  ..., -1.1443, -1.2664,  1.1829]],
        [[ 1.6912, -1.2543,  1.2766,  ..., -1.5507, -0.9671,  2.2351],
         [ 0.5577, -0.8918,  0.6237,  ..., -0.8097, -0.2171,  0.1377],
         [ 1.8288,  0.9498,  0.2342,  ...,  0.2242,  0.2002, -0.0532],
         ...,
         [ 0.9839, -0.8234, -1.6353,  ..., -0.9904, -1.4720,  1.1187],
         [ 0.9839, -0.8234, -1.6353,  ..., -0.9904, -1.4720,  1.1187],
         [ 0.9839, -0.8234, -1.6353,  ..., -0.9904, -1.4720,  1.1187]],
        [[ 1.8409, -1.3207,  1.3842,  ..., -1.5591, -1.0140,  2.3992],
         [ 0.8100, -1.4546,  0.6398,  ..., -0.7570,  0.2443,  0.0292],
         [ 0.4233,  1.1675, -0.2950,  ..., -0.1138, -0.1191, -1.1913],
         ...,
         [ 0.7564, -0.9916, -1.6099,  ..., -0.9413, -1.6012,  0.9555],
         [ 0.7564, -0.9916, -1.6099,  ..., -0.9413, -1.6012,  0.9555],
         [ 0.7564, -0.9916, -1.6099,  ..., -0.9413, -1.6012,  0.9555]]],
       device='cuda:0'), tensor([[[ 1.7938, -0.6508,  1.2963,  ..., -0.8870, -0.5350,  1.5131],
         [ 0.8248, -0.9728,  0.4399,  ..., -0.3141, -0.2335, -0.6737],
         [ 1.6326, -0.0760,  0.6450,  ...,  0.0729,  0.7912, -0.3458],
         ...,
         [ 1.2131, -0.9902, -1.9088,  ..., -1.1149, -0.7089,  1.4320],
         [ 1.2131, -0.9902, -1.9088,  ..., -1.1149, -0.7089,  1.4320],
         [ 1.2131, -0.9902, -1.9088,  ..., -1.1149, -0.7089,  1.4320]],
        [[ 2.1838, -0.5844,  1.3777,  ..., -1.0274, -0.4821,  1.9420],
         [ 1.5761, -0.2064,  0.2082,  ..., -0.2195,  0.5876, -0.6587],
         [ 2.2121, -0.2966, -0.2874,  ..., -0.6329, -1.4389,  0.3683],
         ...,
         [ 1.2758, -1.0791, -1.7339,  ..., -0.8920, -0.2029,  1.5764],
         [ 1.2758, -1.0791, -1.7339,  ..., -0.8920, -0.2029,  1.5764],
         [ 1.2758, -1.0791, -1.7339,  ..., -0.8920, -0.2029,  1.5764]],
        [[ 2.0342, -1.1753,  1.4591,  ..., -0.9662, -1.2334,  1.5894],
         [ 1.1933, -0.7983,  0.6583,  ...,  0.2670, -0.1928, -0.8676],
         [ 1.1436,  0.2790, -0.0711,  ..., -0.2973,  0.7529,  0.0845],
         ...,
         [ 1.0269, -0.9931, -1.5710,  ..., -0.5699, -1.2996,  1.7417],
         [ 1.0269, -0.9931, -1.5710,  ..., -0.5699, -1.2996,  1.7417],
         [ 1.0269, -0.9931, -1.5710,  ..., -0.5699, -1.2996,  1.7417]],
        ...,
        [[ 1.3200, -1.0875,  1.8344,  ..., -1.0279, -0.6364,  2.0957],
         [ 0.8558, -0.5396,  1.0516,  ...,  0.2775, -0.0611, -0.5898],
         [ 0.7101,  0.3306, -0.2638,  ..., -0.8394,  0.6702,  0.1443],
         ...,
         [ 0.5654, -0.9826, -1.0217,  ..., -0.8227, -0.5376,  1.8542],
         [ 0.5654, -0.9826, -1.0217,  ..., -0.8227, -0.5376,  1.8542],
         [ 0.5654, -0.9826, -1.0217,  ..., -0.8227, -0.5376,  1.8542]],
        [[ 1.4287, -0.8377,  2.0816,  ..., -0.8759, -1.1018,  1.7054],
         [ 1.0797, -0.8044,  1.0450,  ...,  0.4418, -0.0194, -0.6831],
         [ 1.5465,  0.6128,  0.1962,  ..., -1.0644,  0.8775, -0.6622],
         ...,
         [ 1.1403, -0.6372, -1.3492,  ...,  0.0170, -0.8028,  1.1152],
         [ 1.1403, -0.6372, -1.3492,  ...,  0.0170, -0.8028,  1.1152],
         [ 1.1403, -0.6372, -1.3492,  ...,  0.0170, -0.8028,  1.1152]],
        [[ 1.8940, -0.8719,  1.6200,  ..., -1.1462, -1.1399,  1.7317],
         [ 1.6248, -1.3009,  0.7981,  ..., -0.0905,  0.1524, -0.6745],
         [ 0.2270,  0.9792, -0.1083,  ..., -0.9336,  0.3944, -1.1388],
         ...,
         [ 1.4625, -0.8466, -1.6546,  ..., -0.2761, -0.7184,  1.3587],
         [ 1.4625, -0.8466, -1.6546,  ..., -0.2761, -0.7184,  1.3587],
         [ 1.4625, -0.8466, -1.6546,  ..., -0.2761, -0.7184,  1.3587]]],
       device='cuda:0'), tensor([[[ 1.9203, -0.0273,  0.7843,  ..., -0.4468, -0.8280,  1.3908],
         [ 1.1525, -1.1381,  0.3809,  ..., -0.1146,  0.2515, -0.6649],
         [ 2.0432, -0.4139,  0.5276,  ...,  0.0872,  1.2665, -0.4701],
         ...,
         [ 1.3045, -0.8329, -1.9977,  ..., -0.7770, -0.3606,  1.0080],
         [ 1.3045, -0.8329, -1.9977,  ..., -0.7770, -0.3606,  1.0080],
         [ 1.3045, -0.8329, -1.9977,  ..., -0.7770, -0.3606,  1.0080]],
        [[ 3.0789,  0.1334,  1.0400,  ..., -0.4455, -0.9264,  0.9459],
         [ 1.9912, -0.1249,  0.0983,  ..., -0.0298,  1.0453, -0.8976],
         [ 1.8815,  0.9425,  0.0502,  ..., -0.7305, -1.1840,  0.3370],
         ...,
         [ 1.7540, -0.7067, -1.8726,  ..., -0.3748, -0.2134,  1.0422],
         [ 1.7540, -0.7067, -1.8726,  ..., -0.3748, -0.2134,  1.0422],
         [ 1.7540, -0.7067, -1.8726,  ..., -0.3748, -0.2134,  1.0422]],
        [[ 2.8550, -0.6528,  1.2222,  ..., -0.0433, -0.8846,  0.9434],
         [ 0.7357, -0.9552,  0.6138,  ...,  0.1855,  0.7327, -0.8387],
         [ 1.2165, -0.1685,  0.5873,  ..., -0.5041,  1.1370, -0.6226],
         ...,
         [ 1.4912, -1.1195, -1.7950,  ..., -0.3176, -0.3967,  1.2389],
         [ 1.4912, -1.1195, -1.7950,  ..., -0.3176, -0.3967,  1.2389],
         [ 1.4912, -1.1195, -1.7950,  ..., -0.3176, -0.3967,  1.2389]],
        ...,
        [[ 2.4846, -0.3835,  0.8088,  ..., -0.7171, -1.0434,  1.6788],
         [ 1.0241, -0.7399,  0.1688,  ...,  0.1864,  0.2451, -0.5610],
         [ 1.5146,  0.3887,  0.1178,  ..., -0.8372,  1.1847, -0.6244],
         ...,
         [ 1.9661, -0.8142, -1.8418,  ..., -0.5274, -0.4272,  1.0843],
         [ 1.9661, -0.8142, -1.8418,  ..., -0.5274, -0.4272,  1.0843],
         [ 1.9661, -0.8142, -1.8418,  ..., -0.5274, -0.4272,  1.0843]],
        [[ 2.6642, -0.6448,  1.2832,  ..., -0.1009, -0.9796,  1.0587],
         [ 1.0737, -0.8989,  0.2827,  ...,  0.2871,  0.8324, -0.5321],
         [ 1.7104,  0.8684,  0.4915,  ..., -0.9265,  1.3955, -1.0643],
         ...,
         [ 1.8835, -0.7170, -1.9196,  ..., -0.2638, -0.1373,  1.0280],
         [ 1.8835, -0.7170, -1.9196,  ..., -0.2638, -0.1373,  1.0280],
         [ 1.8835, -0.7170, -1.9196,  ..., -0.2638, -0.1373,  1.0280]],
        [[ 2.7363, -0.5940,  1.7994,  ..., -0.8241, -0.9638,  1.0949],
         [ 1.9030, -1.0394,  0.4348,  ..., -0.0531,  0.5420, -0.5327],
         [ 1.2495,  0.5395,  0.8703,  ..., -0.1079,  0.4404, -1.1594],
         ...,
         [ 2.1951, -0.7677, -1.9379,  ..., -0.2851, -0.4420,  0.8715],
         [ 2.1951, -0.7677, -1.9379,  ..., -0.2851, -0.4420,  0.8715],
         [ 2.1951, -0.7677, -1.9379,  ..., -0.2851, -0.4420,  0.8715]]],
       device='cuda:0'), tensor([[[ 2.1484, -1.1692,  0.1803,  ..., -0.6395, -0.4940,  1.4341],
         [ 0.9046, -2.2217,  0.3464,  ...,  0.3630, -0.2715, -0.7358],
         [ 2.5529, -1.6448, -0.1761,  ...,  0.2745,  0.6386, -0.2379],
         ...,
         [ 1.7682, -0.7370, -1.1476,  ..., -0.0474,  0.1241,  1.2900],
         [ 1.7682, -0.7370, -1.1476,  ..., -0.0474,  0.1241,  1.2900],
         [ 1.7682, -0.7370, -1.1476,  ..., -0.0474,  0.1241,  1.2900]],
        [[ 2.8473, -0.3065,  0.7416,  ..., -0.7310, -0.6467,  1.0316],
         [ 1.6101, -0.9169,  0.6134,  ...,  0.6856,  0.2930, -0.5133],
         [ 1.8164,  1.3738,  0.2253,  ..., -1.1605, -0.8782,  1.1473],
         ...,
         [ 2.3162, -0.5970, -1.0538,  ...,  0.3363, -0.2561,  1.4325],
         [ 2.3162, -0.5970, -1.0538,  ...,  0.3363, -0.2561,  1.4325],
         [ 2.3162, -0.5970, -1.0538,  ...,  0.3363, -0.2561,  1.4325]],
        [[ 2.4156, -0.6867,  0.8957,  ..., -0.2751, -0.5571,  0.7948],
         [ 0.8035, -1.1700,  0.6916,  ...,  0.7317, -0.3603, -0.4819],
         [ 1.3559,  0.4512,  0.9843,  ..., -0.6683,  1.0945, -1.0092],
         ...,
         [ 1.7915, -0.7167, -1.0697,  ...,  0.2929, -0.3546,  1.2931],
         [ 1.7915, -0.7167, -1.0697,  ...,  0.2929, -0.3546,  1.2931],
         [ 1.7915, -0.7167, -1.0697,  ...,  0.2929, -0.3546,  1.2931]],
        ...,
        [[ 2.8567, -0.9089,  0.6043,  ..., -0.3956, -0.5286,  1.5347],
         [ 1.1729, -1.4323,  0.5512,  ...,  0.4702, -0.8062, -0.4019],
         [ 1.7320,  0.5100,  0.5947,  ..., -1.0376,  0.6206, -0.6292],
         ...,
         [ 2.3885, -0.7885, -1.0787,  ...,  0.2045, -0.2712,  1.3730],
         [ 2.3885, -0.7885, -1.0787,  ...,  0.2045, -0.2712,  1.3730],
         [ 2.3885, -0.7885, -1.0787,  ...,  0.2045, -0.2712,  1.3730]],
        [[ 2.9774, -1.4597,  0.4991,  ...,  0.1263, -0.8783,  0.5855],
         [ 1.1203, -1.8460,  0.2986,  ...,  0.8517, -0.7465, -0.8417],
         [ 2.5926,  0.1302,  0.5688,  ..., -0.2728,  1.0811, -1.2484],
         ...,
         [ 2.2169, -0.6440, -1.4849,  ...,  0.1205, -0.3945,  1.1207],
         [ 2.2169, -0.6440, -1.4849,  ...,  0.1205, -0.3945,  1.1207],
         [ 2.2169, -0.6440, -1.4849,  ...,  0.1205, -0.3945,  1.1207]],
        [[ 2.7680, -1.5264,  1.2313,  ..., -0.6062, -1.0599,  1.1534],
         [ 1.3248, -2.0183,  0.5647,  ...,  0.6044, -0.5205, -0.7732],
         [ 1.6149,  0.5680,  1.0492,  ..., -0.0162, -0.3732, -0.2769],
         ...,
         [ 2.4032, -1.1459, -1.3473,  ...,  0.2303, -0.5477,  1.1653],
         [ 2.4032, -1.1459, -1.3473,  ...,  0.2303, -0.5477,  1.1653],
         [ 2.4032, -1.1459, -1.3473,  ...,  0.2303, -0.5477,  1.1653]]],
       device='cuda:0'), tensor([[[ 1.5519, -1.1154,  0.3643,  ..., -2.1395, -0.5995,  1.7104],
         [ 0.5865, -1.2615,  0.2758,  ...,  0.1964,  0.3100, -0.9680],
         [ 1.8597, -1.5879,  0.5483,  ..., -1.1418,  0.3497, -0.2483],
         ...,
         [ 1.0765, -0.0149, -1.1820,  ..., -1.6572,  0.2153,  1.1564],
         [ 1.0765, -0.0149, -1.1820,  ..., -1.6572,  0.2153,  1.1564],
         [ 1.0765, -0.0149, -1.1820,  ..., -1.6572,  0.2153,  1.1564]],
        [[ 2.2813,  0.2930,  1.1159,  ..., -1.7621,  0.2996,  1.2393],
         [ 1.1313, -0.4901,  0.3607,  ...,  0.5392,  0.8805, -0.2413],
         [ 1.5302,  1.5690,  0.4450,  ..., -0.6435, -0.4003,  1.0711],
         ...,
         [ 1.4769,  0.4785, -0.7166,  ..., -1.2602,  1.0020,  0.8710],
         [ 1.4769,  0.4785, -0.7166,  ..., -1.2602,  1.0020,  0.8710],
         [ 1.4769,  0.4785, -0.7166,  ..., -1.2602,  1.0020,  0.8710]],
        [[ 1.8662,  0.1477,  0.8570,  ..., -0.9696, -1.1123,  1.5169],
         [ 0.6109, -0.5786,  0.3325,  ...,  0.8409,  0.2574, -0.0640],
         [ 0.9704,  1.6454,  1.2056,  ..., -1.0887,  1.6611, -0.2865],
         ...,
         [ 1.3693,  0.1399, -1.1166,  ..., -0.8177, -0.3595,  1.2935],
         [ 1.3693,  0.1399, -1.1166,  ..., -0.8177, -0.3595,  1.2935],
         [ 1.3693,  0.1399, -1.1166,  ..., -0.8177, -0.3595,  1.2935]],
        ...,
        [[ 2.8035,  0.0063,  0.4865,  ..., -1.3467,  0.3765,  2.0139],
         [ 1.2104, -0.6455,  0.3988,  ...,  0.4967,  0.4842,  0.0672],
         [ 1.4165,  1.6360,  0.6726,  ..., -1.8549,  1.4348, -0.1760],
         ...,
         [ 2.1826,  0.3242, -1.0217,  ..., -1.2017,  0.8038,  1.1751],
         [ 2.1826,  0.3242, -1.0217,  ..., -1.2017,  0.8038,  1.1751],
         [ 2.1826,  0.3242, -1.0217,  ..., -1.2017,  0.8038,  1.1751]],
        [[ 2.6290, -1.2916,  0.4028,  ..., -1.0337, -0.6231,  1.0262],
         [ 1.1961, -1.2122,  0.2598,  ...,  0.7932,  0.0473, -0.4131],
         [ 1.8155,  0.2906,  1.2363,  ..., -0.9882,  1.9897, -1.2895],
         ...,
         [ 1.8879, -0.0849, -1.2881,  ..., -1.1292,  0.3170,  1.2761],
         [ 1.8879, -0.0849, -1.2881,  ..., -1.1292,  0.3170,  1.2761],
         [ 1.8879, -0.0849, -1.2881,  ..., -1.1292,  0.3170,  1.2761]],
        [[ 2.4723, -0.6699,  1.4444,  ..., -1.2589, -0.2332,  1.8961],
         [ 1.1863, -1.0447,  0.2962,  ...,  0.5423,  0.3485, -0.5993],
         [ 1.3459,  0.5496,  0.9502,  ..., -0.5522,  0.1762, -0.5983],
         ...,
         [ 1.8277,  0.0325, -0.9569,  ..., -0.9167,  0.3496,  1.3370],
         [ 1.8277,  0.0325, -0.9569,  ..., -0.9167,  0.3496,  1.3370],
         [ 1.8277,  0.0325, -0.9569,  ..., -0.9167,  0.3496,  1.3370]]],
       device='cuda:0'), tensor([[[ 1.3337e+00, -2.9553e-01,  2.5022e-01,  ..., -1.7155e+00,
          -8.6858e-01,  1.9843e+00],
         [ 8.5222e-01, -1.3066e+00, -1.1283e+00,  ...,  4.0903e-01,
           1.2142e+00, -1.2830e+00],
         [ 2.2382e+00, -4.7860e-01, -8.7177e-04,  ..., -5.4669e-01,
           3.2910e-01, -4.0028e-02],
         ...,
         [ 1.0765e+00,  3.3693e-01, -6.9545e-01,  ..., -1.6065e+00,
          -2.2833e-01,  1.8235e+00],
         [ 1.0765e+00,  3.3693e-01, -6.9545e-01,  ..., -1.6065e+00,
          -2.2833e-01,  1.8235e+00],
         [ 1.0765e+00,  3.3693e-01, -6.9545e-01,  ..., -1.6065e+00,
          -2.2833e-01,  1.8235e+00]],
        [[ 1.5346e+00,  1.7267e-01,  6.6364e-01,  ..., -1.3719e+00,
          -4.8224e-01,  2.1451e+00],
         [ 1.0855e+00, -6.3021e-01, -1.4901e-01,  ...,  8.7527e-02,
           1.5315e+00, -6.3471e-01],
         [ 1.3510e+00,  2.8801e-01,  2.4522e-01,  ...,  1.5290e-01,
           7.0957e-02,  3.8752e-01],
         ...,
         [ 7.4940e-01,  2.8511e-01,  2.0063e-01,  ..., -1.2455e+00,
          -9.0873e-02,  1.3682e+00],
         [ 7.4940e-01,  2.8511e-01,  2.0063e-01,  ..., -1.2455e+00,
          -9.0873e-02,  1.3682e+00],
         [ 7.4940e-01,  2.8511e-01,  2.0063e-01,  ..., -1.2455e+00,
          -9.0873e-02,  1.3682e+00]],
        [[ 1.2922e+00,  5.3983e-01,  1.7734e+00,  ..., -1.2134e+00,
          -1.3588e+00,  2.7623e+00],
         [ 1.3893e+00, -3.9894e-01, -3.4183e-01,  ...,  6.8338e-01,
           7.1363e-01, -1.7281e-01],
         [ 1.3760e+00,  1.4719e+00,  1.1846e+00,  ..., -1.3428e+00,
           7.8051e-01,  1.5019e-01],
         ...,
         [ 7.3586e-01,  6.9803e-01, -1.1120e-01,  ..., -1.4814e+00,
          -7.6686e-01,  1.6449e+00],
         [ 7.3586e-01,  6.9803e-01, -1.1120e-01,  ..., -1.4814e+00,
          -7.6686e-01,  1.6449e+00],
         [ 7.3586e-01,  6.9803e-01, -1.1120e-01,  ..., -1.4814e+00,
          -7.6686e-01,  1.6449e+00]],
        ...,
        [[ 1.7766e+00,  3.1003e-01,  8.7118e-01,  ..., -1.5025e+00,
          -1.2236e-01,  2.3881e+00],
         [ 1.4249e+00, -2.1517e-01, -5.9557e-01,  ...,  1.7808e-01,
           1.5302e+00,  2.8477e-01],
         [ 4.7977e-01,  1.8940e+00,  1.0171e-02,  ..., -1.1340e+00,
           1.4943e+00, -3.0038e-01],
         ...,
         [ 1.6629e+00,  5.1968e-01, -3.7507e-01,  ..., -1.1603e+00,
          -1.8227e-01,  1.7236e+00],
         [ 1.6629e+00,  5.1968e-01, -3.7507e-01,  ..., -1.1603e+00,
          -1.8227e-01,  1.7236e+00],
         [ 1.6629e+00,  5.1968e-01, -3.7507e-01,  ..., -1.1603e+00,
          -1.8227e-01,  1.7236e+00]],
        [[ 2.8683e+00,  8.0674e-01,  2.5334e-01,  ..., -1.3269e+00,
          -1.5565e-01,  2.0013e+00],
         [ 1.6506e+00, -1.2475e-01, -9.3193e-01,  ...,  6.9450e-01,
           1.0121e+00, -4.8090e-01],
         [ 1.6338e+00,  1.5777e+00,  7.0777e-01,  ..., -4.4224e-01,
           2.3316e+00, -1.1354e+00],
         ...,
         [ 1.8064e+00,  1.2652e+00, -1.4440e+00,  ..., -1.3068e+00,
           3.5707e-01,  1.8704e+00],
         [ 1.8064e+00,  1.2652e+00, -1.4440e+00,  ..., -1.3068e+00,
           3.5707e-01,  1.8704e+00],
         [ 1.8064e+00,  1.2652e+00, -1.4440e+00,  ..., -1.3068e+00,
           3.5707e-01,  1.8704e+00]],
        [[ 2.7733e+00,  3.4109e-01,  2.1415e-01,  ..., -1.0796e+00,
          -5.7911e-01,  2.0239e+00],
         [ 1.7609e+00, -7.0544e-01, -9.7018e-01,  ...,  6.1004e-01,
           1.1516e+00, -4.8849e-01],
         [ 8.8439e-01,  1.7932e+00, -1.7786e-01,  ..., -3.1133e-01,
           1.1809e-01, -8.4022e-01],
         ...,
         [ 1.3375e+00,  6.1681e-01, -9.9751e-01,  ..., -1.2328e+00,
          -4.0137e-01,  1.5893e+00],
         [ 1.3375e+00,  6.1681e-01, -9.9751e-01,  ..., -1.2328e+00,
          -4.0137e-01,  1.5893e+00],
         [ 1.3375e+00,  6.1681e-01, -9.9751e-01,  ..., -1.2328e+00,
          -4.0137e-01,  1.5893e+00]]], device='cuda:0')), attentions=None)
/nfs/lambda_stor_01/data/avasan/LLM_Chemistry/ChemBerta/t5-chem/data_utils.py:28: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  "y_regression_values": torch.tensor(self.y_regression_values[idx]).to(self.device),
Traceback (most recent call last):
  File "/nfs/lambda_stor_01/data/avasan/LLM_Chemistry/ChemBerta/t5-chem/run_script.py", line 173, in <module>
    train_one_epoch(epoch)
  File "/nfs/lambda_stor_01/data/avasan/LLM_Chemistry/ChemBerta/t5-chem/run_script.py", line 87, in train_one_epoch
    encoder = np.mean(encoder, axis=1)#.mean(dim=1)
  File "/homes/avasan/miniforge3_new/envs/sst_llama/lib/python3.10/site-packages/numpy/core/fromnumeric.py", line 3502, in mean
    return mean(axis=axis, dtype=dtype, out=out, **kwargs)
TypeError: mean() received an invalid combination of arguments - got (dtype=NoneType, out=NoneType, axis=int, ), but expected one of:
 * (*, torch.dtype dtype)
 * (tuple of ints dim, bool keepdim, *, torch.dtype dtype)
 * (tuple of names dim, bool keepdim, *, torch.dtype dtype)